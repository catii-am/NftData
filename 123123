"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NftItem = void 0;
exports.storeStateInit = storeStateInit;
exports.loadStateInit = loadStateInit;
exports.storeContext = storeContext;
exports.loadContext = loadContext;
exports.storeSendParameters = storeSendParameters;
exports.loadSendParameters = loadSendParameters;
exports.storeDeploy = storeDeploy;
exports.loadDeploy = loadDeploy;
exports.storeDeployOk = storeDeployOk;
exports.loadDeployOk = loadDeployOk;
exports.storeFactoryDeploy = storeFactoryDeploy;
exports.loadFactoryDeploy = loadFactoryDeploy;
exports.storeNftTransfer = storeNftTransfer;
exports.loadNftTransfer = loadNftTransfer;
exports.storeNftOwnershipAssigned = storeNftOwnershipAssigned;
exports.loadNftOwnershipAssigned = loadNftOwnershipAssigned;
exports.storeNftExcesses = storeNftExcesses;
exports.loadNftExcesses = loadNftExcesses;
exports.storeNftGetStaticData = storeNftGetStaticData;
exports.loadNftGetStaticData = loadNftGetStaticData;
exports.storeNftReportStaticData = storeNftReportStaticData;
exports.loadNftReportStaticData = loadNftReportStaticData;
exports.storeNftGetRoyaltyParams = storeNftGetRoyaltyParams;
exports.loadNftGetRoyaltyParams = loadNftGetRoyaltyParams;
exports.storeNftReportRoyaltyParams = storeNftReportRoyaltyParams;
exports.loadNftReportRoyaltyParams = loadNftReportRoyaltyParams;
exports.storeNftDestroy = storeNftDestroy;
exports.loadNftDestroy = loadNftDestroy;
exports.storeNftDeploy = storeNftDeploy;
exports.loadNftDeploy = loadNftDeploy;
exports.storeRequestNftDeploy = storeRequestNftDeploy;
exports.loadRequestNftDeploy = loadRequestNftDeploy;
exports.storeNftData = storeNftData;
exports.loadNftData = loadNftData;
exports.storeNftRoyaltyParams = storeNftRoyaltyParams;
exports.loadNftRoyaltyParams = loadNftRoyaltyParams;
var core_1 = require("@ton/core");
function storeStateInit(src) {
    return function (builder) {
        var b_0 = builder;
        b_0.storeRef(src.code);
        b_0.storeRef(src.data);
    };
}
function loadStateInit(slice) {
    var sc_0 = slice;
    var _code = sc_0.loadRef();
    var _data = sc_0.loadRef();
    return { $$type: 'StateInit', code: _code, data: _data };
}
function loadTupleStateInit(source) {
    var _code = source.readCell();
    var _data = source.readCell();
    return { $$type: 'StateInit', code: _code, data: _data };
}
function storeTupleStateInit(source) {
    var builder = new core_1.TupleBuilder();
    builder.writeCell(source.code);
    builder.writeCell(source.data);
    return builder.build();
}
function dictValueParserStateInit() {
    return {
        serialize: function (src, builder) {
            builder.storeRef((0, core_1.beginCell)().store(storeStateInit(src)).endCell());
        },
        parse: function (src) {
            return loadStateInit(src.loadRef().beginParse());
        }
    };
}
function storeContext(src) {
    return function (builder) {
        var b_0 = builder;
        b_0.storeBit(src.bounced);
        b_0.storeAddress(src.sender);
        b_0.storeInt(src.value, 257);
        b_0.storeRef(src.raw);
    };
}
function loadContext(slice) {
    var sc_0 = slice;
    var _bounced = sc_0.loadBit();
    var _sender = sc_0.loadAddress();
    var _value = sc_0.loadIntBig(257);
    var _raw = sc_0.loadRef();
    return { $$type: 'Context', bounced: _bounced, sender: _sender, value: _value, raw: _raw };
}
function loadTupleContext(source) {
    var _bounced = source.readBoolean();
    var _sender = source.readAddress();
    var _value = source.readBigNumber();
    var _raw = source.readCell();
    return { $$type: 'Context', bounced: _bounced, sender: _sender, value: _value, raw: _raw };
}
function storeTupleContext(source) {
    var builder = new core_1.TupleBuilder();
    builder.writeBoolean(source.bounced);
    builder.writeAddress(source.sender);
    builder.writeNumber(source.value);
    builder.writeSlice(source.raw);
    return builder.build();
}
function dictValueParserContext() {
    return {
        serialize: function (src, builder) {
            builder.storeRef((0, core_1.beginCell)().store(storeContext(src)).endCell());
        },
        parse: function (src) {
            return loadContext(src.loadRef().beginParse());
        }
    };
}
function storeSendParameters(src) {
    return function (builder) {
        var b_0 = builder;
        b_0.storeBit(src.bounce);
        b_0.storeAddress(src.to);
        b_0.storeInt(src.value, 257);
        b_0.storeInt(src.mode, 257);
        if (src.body !== null && src.body !== undefined) {
            b_0.storeBit(true).storeRef(src.body);
        }
        else {
            b_0.storeBit(false);
        }
        if (src.code !== null && src.code !== undefined) {
            b_0.storeBit(true).storeRef(src.code);
        }
        else {
            b_0.storeBit(false);
        }
        if (src.data !== null && src.data !== undefined) {
            b_0.storeBit(true).storeRef(src.data);
        }
        else {
            b_0.storeBit(false);
        }
    };
}
function loadSendParameters(slice) {
    var sc_0 = slice;
    var _bounce = sc_0.loadBit();
    var _to = sc_0.loadAddress();
    var _value = sc_0.loadIntBig(257);
    var _mode = sc_0.loadIntBig(257);
    var _body = sc_0.loadBit() ? sc_0.loadRef() : null;
    var _code = sc_0.loadBit() ? sc_0.loadRef() : null;
    var _data = sc_0.loadBit() ? sc_0.loadRef() : null;
    return { $$type: 'SendParameters', bounce: _bounce, to: _to, value: _value, mode: _mode, body: _body, code: _code, data: _data };
}
function loadTupleSendParameters(source) {
    var _bounce = source.readBoolean();
    var _to = source.readAddress();
    var _value = source.readBigNumber();
    var _mode = source.readBigNumber();
    var _body = source.readCellOpt();
    var _code = source.readCellOpt();
    var _data = source.readCellOpt();
    return { $$type: 'SendParameters', bounce: _bounce, to: _to, value: _value, mode: _mode, body: _body, code: _code, data: _data };
}
function storeTupleSendParameters(source) {
    var builder = new core_1.TupleBuilder();
    builder.writeBoolean(source.bounce);
    builder.writeAddress(source.to);
    builder.writeNumber(source.value);
    builder.writeNumber(source.mode);
    builder.writeCell(source.body);
    builder.writeCell(source.code);
    builder.writeCell(source.data);
    return builder.build();
}
function dictValueParserSendParameters() {
    return {
        serialize: function (src, builder) {
            builder.storeRef((0, core_1.beginCell)().store(storeSendParameters(src)).endCell());
        },
        parse: function (src) {
            return loadSendParameters(src.loadRef().beginParse());
        }
    };
}
function storeDeploy(src) {
    return function (builder) {
        var b_0 = builder;
        b_0.storeUint(2490013878, 32);
        b_0.storeUint(src.queryId, 64);
    };
}
function loadDeploy(slice) {
    var sc_0 = slice;
    if (sc_0.loadUint(32) !== 2490013878) {
        throw Error('Invalid prefix');
    }
    var _queryId = sc_0.loadUintBig(64);
    return { $$type: 'Deploy', queryId: _queryId };
}
function loadTupleDeploy(source) {
    var _queryId = source.readBigNumber();
    return { $$type: 'Deploy', queryId: _queryId };
}
function storeTupleDeploy(source) {
    var builder = new core_1.TupleBuilder();
    builder.writeNumber(source.queryId);
    return builder.build();
}
function dictValueParserDeploy() {
    return {
        serialize: function (src, builder) {
            builder.storeRef((0, core_1.beginCell)().store(storeDeploy(src)).endCell());
        },
        parse: function (src) {
            return loadDeploy(src.loadRef().beginParse());
        }
    };
}
function storeDeployOk(src) {
    return function (builder) {
        var b_0 = builder;
        b_0.storeUint(2952335191, 32);
        b_0.storeUint(src.queryId, 64);
    };
}
function loadDeployOk(slice) {
    var sc_0 = slice;
    if (sc_0.loadUint(32) !== 2952335191) {
        throw Error('Invalid prefix');
    }
    var _queryId = sc_0.loadUintBig(64);
    return { $$type: 'DeployOk', queryId: _queryId };
}
function loadTupleDeployOk(source) {
    var _queryId = source.readBigNumber();
    return { $$type: 'DeployOk', queryId: _queryId };
}
function storeTupleDeployOk(source) {
    var builder = new core_1.TupleBuilder();
    builder.writeNumber(source.queryId);
    return builder.build();
}
function dictValueParserDeployOk() {
    return {
        serialize: function (src, builder) {
            builder.storeRef((0, core_1.beginCell)().store(storeDeployOk(src)).endCell());
        },
        parse: function (src) {
            return loadDeployOk(src.loadRef().beginParse());
        }
    };
}
function storeFactoryDeploy(src) {
    return function (builder) {
        var b_0 = builder;
        b_0.storeUint(1829761339, 32);
        b_0.storeUint(src.queryId, 64);
        b_0.storeAddress(src.cashback);
    };
}
function loadFactoryDeploy(slice) {
    var sc_0 = slice;
    if (sc_0.loadUint(32) !== 1829761339) {
        throw Error('Invalid prefix');
    }
    var _queryId = sc_0.loadUintBig(64);
    var _cashback = sc_0.loadAddress();
    return { $$type: 'FactoryDeploy', queryId: _queryId, cashback: _cashback };
}
function loadTupleFactoryDeploy(source) {
    var _queryId = source.readBigNumber();
    var _cashback = source.readAddress();
    return { $$type: 'FactoryDeploy', queryId: _queryId, cashback: _cashback };
}
function storeTupleFactoryDeploy(source) {
    var builder = new core_1.TupleBuilder();
    builder.writeNumber(source.queryId);
    builder.writeAddress(source.cashback);
    return builder.build();
}
function dictValueParserFactoryDeploy() {
    return {
        serialize: function (src, builder) {
            builder.storeRef((0, core_1.beginCell)().store(storeFactoryDeploy(src)).endCell());
        },
        parse: function (src) {
            return loadFactoryDeploy(src.loadRef().beginParse());
        }
    };
}
function storeNftTransfer(src) {
    return function (builder) {
        var b_0 = builder;
        b_0.storeUint(1607220500, 32);
        b_0.storeUint(src.query_id, 64);
        b_0.storeAddress(src.new_owner);
        b_0.storeAddress(src.response_destination);
        if (src.custom_payload !== null && src.custom_payload !== undefined) {
            b_0.storeBit(true).storeRef(src.custom_payload);
        }
        else {
            b_0.storeBit(false);
        }
        b_0.storeCoins(src.forward_amount);
        b_0.storeBuilder(src.forward_payload.asBuilder());
    };
}
function loadNftTransfer(slice) {
    var sc_0 = slice;
    if (sc_0.loadUint(32) !== 1607220500) {
        throw Error('Invalid prefix');
    }
    var _query_id = sc_0.loadUintBig(64);
    var _new_owner = sc_0.loadAddress();
    var _response_destination = sc_0.loadAddress();
    var _custom_payload = sc_0.loadBit() ? sc_0.loadRef() : null;
    var _forward_amount = sc_0.loadCoins();
    var _forward_payload = sc_0.asCell();
    return { $$type: 'NftTransfer', query_id: _query_id, new_owner: _new_owner, response_destination: _response_destination, custom_payload: _custom_payload, forward_amount: _forward_amount, forward_payload: _forward_payload };
}
function loadTupleNftTransfer(source) {
    var _query_id = source.readBigNumber();
    var _new_owner = source.readAddress();
    var _response_destination = source.readAddress();
    var _custom_payload = source.readCellOpt();
    var _forward_amount = source.readBigNumber();
    var _forward_payload = source.readCell();
    return { $$type: 'NftTransfer', query_id: _query_id, new_owner: _new_owner, response_destination: _response_destination, custom_payload: _custom_payload, forward_amount: _forward_amount, forward_payload: _forward_payload };
}
function storeTupleNftTransfer(source) {
    var builder = new core_1.TupleBuilder();
    builder.writeNumber(source.query_id);
    builder.writeAddress(source.new_owner);
    builder.writeAddress(source.response_destination);
    builder.writeCell(source.custom_payload);
    builder.writeNumber(source.forward_amount);
    builder.writeSlice(source.forward_payload);
    return builder.build();
}
function dictValueParserNftTransfer() {
    return {
        serialize: function (src, builder) {
            builder.storeRef((0, core_1.beginCell)().store(storeNftTransfer(src)).endCell());
        },
        parse: function (src) {
            return loadNftTransfer(src.loadRef().beginParse());
        }
    };
}
function storeNftOwnershipAssigned(src) {
    return function (builder) {
        var b_0 = builder;
        b_0.storeUint(85167505, 32);
        b_0.storeUint(src.query_id, 64);
        b_0.storeAddress(src.prev_owner);
        b_0.storeBuilder(src.forward_payload.asBuilder());
    };
}
function loadNftOwnershipAssigned(slice) {
    var sc_0 = slice;
    if (sc_0.loadUint(32) !== 85167505) {
        throw Error('Invalid prefix');
    }
    var _query_id = sc_0.loadUintBig(64);
    var _prev_owner = sc_0.loadAddress();
    var _forward_payload = sc_0.asCell();
    return { $$type: 'NftOwnershipAssigned', query_id: _query_id, prev_owner: _prev_owner, forward_payload: _forward_payload };
}
function loadTupleNftOwnershipAssigned(source) {
    var _query_id = source.readBigNumber();
    var _prev_owner = source.readAddress();
    var _forward_payload = source.readCell();
    return { $$type: 'NftOwnershipAssigned', query_id: _query_id, prev_owner: _prev_owner, forward_payload: _forward_payload };
}
function storeTupleNftOwnershipAssigned(source) {
    var builder = new core_1.TupleBuilder();
    builder.writeNumber(source.query_id);
    builder.writeAddress(source.prev_owner);
    builder.writeSlice(source.forward_payload);
    return builder.build();
}
function dictValueParserNftOwnershipAssigned() {
    return {
        serialize: function (src, builder) {
            builder.storeRef((0, core_1.beginCell)().store(storeNftOwnershipAssigned(src)).endCell());
        },
        parse: function (src) {
            return loadNftOwnershipAssigned(src.loadRef().beginParse());
        }
    };
}
function storeNftExcesses(src) {
    return function (builder) {
        var b_0 = builder;
        b_0.storeUint(1871312355, 32);
        b_0.storeUint(src.query_id, 64);
    };
}
function loadNftExcesses(slice) {
    var sc_0 = slice;
    if (sc_0.loadUint(32) !== 1871312355) {
        throw Error('Invalid prefix');
    }
    var _query_id = sc_0.loadUintBig(64);
    return { $$type: 'NftExcesses', query_id: _query_id };
}
function loadTupleNftExcesses(source) {
    var _query_id = source.readBigNumber();
    return { $$type: 'NftExcesses', query_id: _query_id };
}
function storeTupleNftExcesses(source) {
    var builder = new core_1.TupleBuilder();
    builder.writeNumber(source.query_id);
    return builder.build();
}
function dictValueParserNftExcesses() {
    return {
        serialize: function (src, builder) {
            builder.storeRef((0, core_1.beginCell)().store(storeNftExcesses(src)).endCell());
        },
        parse: function (src) {
            return loadNftExcesses(src.loadRef().beginParse());
        }
    };
}
function storeNftGetStaticData(src) {
    return function (builder) {
        var b_0 = builder;
        b_0.storeUint(801842850, 32);
        b_0.storeUint(src.query_id, 64);
    };
}
function loadNftGetStaticData(slice) {
    var sc_0 = slice;
    if (sc_0.loadUint(32) !== 801842850) {
        throw Error('Invalid prefix');
    }
    var _query_id = sc_0.loadUintBig(64);
    return { $$type: 'NftGetStaticData', query_id: _query_id };
}
function loadTupleNftGetStaticData(source) {
    var _query_id = source.readBigNumber();
    return { $$type: 'NftGetStaticData', query_id: _query_id };
}
function storeTupleNftGetStaticData(source) {
    var builder = new core_1.TupleBuilder();
    builder.writeNumber(source.query_id);
    return builder.build();
}
function dictValueParserNftGetStaticData() {
    return {
        serialize: function (src, builder) {
            builder.storeRef((0, core_1.beginCell)().store(storeNftGetStaticData(src)).endCell());
        },
        parse: function (src) {
            return loadNftGetStaticData(src.loadRef().beginParse());
        }
    };
}
function storeNftReportStaticData(src) {
    return function (builder) {
        var b_0 = builder;
        b_0.storeUint(2339837749, 32);
        b_0.storeUint(src.query_id, 64);
        b_0.storeUint(src.index, 256);
        b_0.storeAddress(src.collection);
    };
}
function loadNftReportStaticData(slice) {
    var sc_0 = slice;
    if (sc_0.loadUint(32) !== 2339837749) {
        throw Error('Invalid prefix');
    }
    var _query_id = sc_0.loadUintBig(64);
    var _index = sc_0.loadUintBig(256);
    var _collection = sc_0.loadAddress();
    return { $$type: 'NftReportStaticData', query_id: _query_id, index: _index, collection: _collection };
}
function loadTupleNftReportStaticData(source) {
    var _query_id = source.readBigNumber();
    var _index = source.readBigNumber();
    var _collection = source.readAddress();
    return { $$type: 'NftReportStaticData', query_id: _query_id, index: _index, collection: _collection };
}
function storeTupleNftReportStaticData(source) {
    var builder = new core_1.TupleBuilder();
    builder.writeNumber(source.query_id);
    builder.writeNumber(source.index);
    builder.writeAddress(source.collection);
    return builder.build();
}
function dictValueParserNftReportStaticData() {
    return {
        serialize: function (src, builder) {
            builder.storeRef((0, core_1.beginCell)().store(storeNftReportStaticData(src)).endCell());
        },
        parse: function (src) {
            return loadNftReportStaticData(src.loadRef().beginParse());
        }
    };
}
function storeNftGetRoyaltyParams(src) {
    return function (builder) {
        var b_0 = builder;
        b_0.storeUint(1765620048, 32);
        b_0.storeUint(src.query_id, 64);
    };
}
function loadNftGetRoyaltyParams(slice) {
    var sc_0 = slice;
    if (sc_0.loadUint(32) !== 1765620048) {
        throw Error('Invalid prefix');
    }
    var _query_id = sc_0.loadUintBig(64);
    return { $$type: 'NftGetRoyaltyParams', query_id: _query_id };
}
function loadTupleNftGetRoyaltyParams(source) {
    var _query_id = source.readBigNumber();
    return { $$type: 'NftGetRoyaltyParams', query_id: _query_id };
}
function storeTupleNftGetRoyaltyParams(source) {
    var builder = new core_1.TupleBuilder();
    builder.writeNumber(source.query_id);
    return builder.build();
}
function dictValueParserNftGetRoyaltyParams() {
    return {
        serialize: function (src, builder) {
            builder.storeRef((0, core_1.beginCell)().store(storeNftGetRoyaltyParams(src)).endCell());
        },
        parse: function (src) {
            return loadNftGetRoyaltyParams(src.loadRef().beginParse());
        }
    };
}
function storeNftReportRoyaltyParams(src) {
    return function (builder) {
        var b_0 = builder;
        b_0.storeUint(2831876269, 32);
        b_0.storeUint(src.query_id, 64);
        b_0.storeUint(src.numerator, 16);
        b_0.storeUint(src.denominator, 16);
        b_0.storeAddress(src.destination);
    };
}
function loadNftReportRoyaltyParams(slice) {
    var sc_0 = slice;
    if (sc_0.loadUint(32) !== 2831876269) {
        throw Error('Invalid prefix');
    }
    var _query_id = sc_0.loadUintBig(64);
    var _numerator = sc_0.loadUintBig(16);
    var _denominator = sc_0.loadUintBig(16);
    var _destination = sc_0.loadAddress();
    return { $$type: 'NftReportRoyaltyParams', query_id: _query_id, numerator: _numerator, denominator: _denominator, destination: _destination };
}
function loadTupleNftReportRoyaltyParams(source) {
    var _query_id = source.readBigNumber();
    var _numerator = source.readBigNumber();
    var _denominator = source.readBigNumber();
    var _destination = source.readAddress();
    return { $$type: 'NftReportRoyaltyParams', query_id: _query_id, numerator: _numerator, denominator: _denominator, destination: _destination };
}
function storeTupleNftReportRoyaltyParams(source) {
    var builder = new core_1.TupleBuilder();
    builder.writeNumber(source.query_id);
    builder.writeNumber(source.numerator);
    builder.writeNumber(source.denominator);
    builder.writeAddress(source.destination);
    return builder.build();
}
function dictValueParserNftReportRoyaltyParams() {
    return {
        serialize: function (src, builder) {
            builder.storeRef((0, core_1.beginCell)().store(storeNftReportRoyaltyParams(src)).endCell());
        },
        parse: function (src) {
            return loadNftReportRoyaltyParams(src.loadRef().beginParse());
        }
    };
}
function storeNftDestroy(src) {
    return function (builder) {
        var b_0 = builder;
        b_0.storeUint(520377210, 32);
        b_0.storeUint(src.query_id, 64);
    };
}
function loadNftDestroy(slice) {
    var sc_0 = slice;
    if (sc_0.loadUint(32) !== 520377210) {
        throw Error('Invalid prefix');
    }
    var _query_id = sc_0.loadUintBig(64);
    return { $$type: 'NftDestroy', query_id: _query_id };
}
function loadTupleNftDestroy(source) {
    var _query_id = source.readBigNumber();
    return { $$type: 'NftDestroy', query_id: _query_id };
}
function storeTupleNftDestroy(source) {
    var builder = new core_1.TupleBuilder();
    builder.writeNumber(source.query_id);
    return builder.build();
}
function dictValueParserNftDestroy() {
    return {
        serialize: function (src, builder) {
            builder.storeRef((0, core_1.beginCell)().store(storeNftDestroy(src)).endCell());
        },
        parse: function (src) {
            return loadNftDestroy(src.loadRef().beginParse());
        }
    };
}
function storeNftDeploy(src) {
    return function (builder) {
        var b_0 = builder;
        b_0.storeUint(3332240189, 32);
        b_0.storeUint(src.index, 256);
        b_0.storeAddress(src.owner);
        b_0.storeRef(src.content);
        b_0.storeAddress(src.royalty_destination);
        b_0.storeUint(src.numerator, 16);
        b_0.storeUint(src.denominator, 16);
    };
}
function loadNftDeploy(slice) {
    var sc_0 = slice;
    if (sc_0.loadUint(32) !== 3332240189) {
        throw Error('Invalid prefix');
    }
    var _index = sc_0.loadUintBig(256);
    var _owner = sc_0.loadAddress();
    var _content = sc_0.loadRef();
    var _royalty_destination = sc_0.loadAddress();
    var _numerator = sc_0.loadUintBig(16);
    var _denominator = sc_0.loadUintBig(16);
    return { $$type: 'NftDeploy', index: _index, owner: _owner, content: _content, royalty_destination: _royalty_destination, numerator: _numerator, denominator: _denominator };
}
function loadTupleNftDeploy(source) {
    var _index = source.readBigNumber();
    var _owner = source.readAddress();
    var _content = source.readCell();
    var _royalty_destination = source.readAddress();
    var _numerator = source.readBigNumber();
    var _denominator = source.readBigNumber();
    return { $$type: 'NftDeploy', index: _index, owner: _owner, content: _content, royalty_destination: _royalty_destination, numerator: _numerator, denominator: _denominator };
}
function storeTupleNftDeploy(source) {
    var builder = new core_1.TupleBuilder();
    builder.writeNumber(source.index);
    builder.writeAddress(source.owner);
    builder.writeCell(source.content);
    builder.writeAddress(source.royalty_destination);
    builder.writeNumber(source.numerator);
    builder.writeNumber(source.denominator);
    return builder.build();
}
function dictValueParserNftDeploy() {
    return {
        serialize: function (src, builder) {
            builder.storeRef((0, core_1.beginCell)().store(storeNftDeploy(src)).endCell());
        },
        parse: function (src) {
            return loadNftDeploy(src.loadRef().beginParse());
        }
    };
}
function storeRequestNftDeploy(src) {
    return function (builder) {
        var b_0 = builder;
        b_0.storeUint(1410495530, 32);
        b_0.storeUint(src.index, 256);
        b_0.storeCoins(src.amount);
        b_0.storeAddress(src.owner);
        b_0.storeRef(src.content);
    };
}
function loadRequestNftDeploy(slice) {
    var sc_0 = slice;
    if (sc_0.loadUint(32) !== 1410495530) {
        throw Error('Invalid prefix');
    }
    var _index = sc_0.loadUintBig(256);
    var _amount = sc_0.loadCoins();
    var _owner = sc_0.loadAddress();
    var _content = sc_0.loadRef();
    return { $$type: 'RequestNftDeploy', index: _index, amount: _amount, owner: _owner, content: _content };
}
function loadTupleRequestNftDeploy(source) {
    var _index = source.readBigNumber();
    var _amount = source.readBigNumber();
    var _owner = source.readAddress();
    var _content = source.readCell();
    return { $$type: 'RequestNftDeploy', index: _index, amount: _amount, owner: _owner, content: _content };
}
function storeTupleRequestNftDeploy(source) {
    var builder = new core_1.TupleBuilder();
    builder.writeNumber(source.index);
    builder.writeNumber(source.amount);
    builder.writeAddress(source.owner);
    builder.writeCell(source.content);
    return builder.build();
}
function dictValueParserRequestNftDeploy() {
    return {
        serialize: function (src, builder) {
            builder.storeRef((0, core_1.beginCell)().store(storeRequestNftDeploy(src)).endCell());
        },
        parse: function (src) {
            return loadRequestNftDeploy(src.loadRef().beginParse());
        }
    };
}
function storeNftData(src) {
    return function (builder) {
        var b_0 = builder;
        b_0.storeBit(src.deployed);
        b_0.storeInt(src.index, 257);
        b_0.storeAddress(src.collection);
        b_0.storeAddress(src.owner);
        b_0.storeRef(src.content);
    };
}
function loadNftData(slice) {
    var sc_0 = slice;
    var _deployed = sc_0.loadBit();
    var _index = sc_0.loadIntBig(257);
    var _collection = sc_0.loadAddress();
    var _owner = sc_0.loadAddress();
    var _content = sc_0.loadRef();
    return { $$type: 'NftData', deployed: _deployed, index: _index, collection: _collection, owner: _owner, content: _content };
}
function loadTupleNftData(source) {
    var _deployed = source.readBoolean();
    var _index = source.readBigNumber();
    var _collection = source.readAddress();
    var _owner = source.readAddress();
    var _content = source.readCell();
    return { $$type: 'NftData', deployed: _deployed, index: _index, collection: _collection, owner: _owner, content: _content };
}
function storeTupleNftData(source) {
    var builder = new core_1.TupleBuilder();
    builder.writeBoolean(source.deployed);
    builder.writeNumber(source.index);
    builder.writeAddress(source.collection);
    builder.writeAddress(source.owner);
    builder.writeCell(source.content);
    return builder.build();
}
function dictValueParserNftData() {
    return {
        serialize: function (src, builder) {
            builder.storeRef((0, core_1.beginCell)().store(storeNftData(src)).endCell());
        },
        parse: function (src) {
            return loadNftData(src.loadRef().beginParse());
        }
    };
}
function storeNftRoyaltyParams(src) {
    return function (builder) {
        var b_0 = builder;
        b_0.storeInt(src.numerator, 257);
        b_0.storeInt(src.denominator, 257);
        b_0.storeAddress(src.royalty_destination);
    };
}
function loadNftRoyaltyParams(slice) {
    var sc_0 = slice;
    var _numerator = sc_0.loadIntBig(257);
    var _denominator = sc_0.loadIntBig(257);
    var _royalty_destination = sc_0.loadAddress();
    return { $$type: 'NftRoyaltyParams', numerator: _numerator, denominator: _denominator, royalty_destination: _royalty_destination };
}
function loadTupleNftRoyaltyParams(source) {
    var _numerator = source.readBigNumber();
    var _denominator = source.readBigNumber();
    var _royalty_destination = source.readAddress();
    return { $$type: 'NftRoyaltyParams', numerator: _numerator, denominator: _denominator, royalty_destination: _royalty_destination };
}
function storeTupleNftRoyaltyParams(source) {
    var builder = new core_1.TupleBuilder();
    builder.writeNumber(source.numerator);
    builder.writeNumber(source.denominator);
    builder.writeAddress(source.royalty_destination);
    return builder.build();
}
function dictValueParserNftRoyaltyParams() {
    return {
        serialize: function (src, builder) {
            builder.storeRef((0, core_1.beginCell)().store(storeNftRoyaltyParams(src)).endCell());
        },
        parse: function (src) {
            return loadNftRoyaltyParams(src.loadRef().beginParse());
        }
    };
}
function initNftItem_init_args(src) {
    return function (builder) {
        var b_0 = builder;
        b_0.storeAddress(src.collection);
        b_0.storeInt(src.index, 257);
    };
}
function NftItem_init(collection, index) {
    return __awaiter(this, void 0, void 0, function () {
        var __code, __system, builder, __data;
        return __generator(this, function (_a) {
            __code = core_1.Cell.fromBase64('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');
            __system = core_1.Cell.fromBase64('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');
            builder = (0, core_1.beginCell)();
            builder.storeRef(__system);
            builder.storeUint(0, 1);
            initNftItem_init_args({ $$type: 'NftItem_init_args', collection: collection, index: index })(builder);
            __data = builder.endCell();
            return [2 /*return*/, { code: __code, data: __data }];
        });
    });
}
var NftItem_errors = {
    2: { message: "Stack underflow" },
    3: { message: "Stack overflow" },
    4: { message: "Integer overflow" },
    5: { message: "Integer out of expected range" },
    6: { message: "Invalid opcode" },
    7: { message: "Type check error" },
    8: { message: "Cell overflow" },
    9: { message: "Cell underflow" },
    10: { message: "Dictionary error" },
    13: { message: "Out of gas error" },
    32: { message: "Method ID not found" },
    34: { message: "Action is invalid or not supported" },
    37: { message: "Not enough TON" },
    38: { message: "Not enough extra-currencies" },
    128: { message: "Null reference exception" },
    129: { message: "Invalid serialization prefix" },
    130: { message: "Invalid incoming message" },
    131: { message: "Constraints error" },
    132: { message: "Access denied" },
    133: { message: "Contract stopped" },
    134: { message: "Invalid argument" },
    135: { message: "Code of a contract was not found" },
    136: { message: "Invalid address" },
    137: { message: "Masterchain support is not enabled for this contract" },
    11850: { message: "Not Deployed" },
    23263: { message: "Invalid Sender" },
    30404: { message: "Invalid Amount" },
    42491: { message: "Invalid Owner" },
    44083: { message: "Invalid Index" },
    50324: { message: "Already Deployed" },
};
var NftItem_types = [
    { "name": "StateInit", "header": null, "fields": [{ "name": "code", "type": { "kind": "simple", "type": "cell", "optional": false } }, { "name": "data", "type": { "kind": "simple", "type": "cell", "optional": false } }] },
    { "name": "Context", "header": null, "fields": [{ "name": "bounced", "type": { "kind": "simple", "type": "bool", "optional": false } }, { "name": "sender", "type": { "kind": "simple", "type": "address", "optional": false } }, { "name": "value", "type": { "kind": "simple", "type": "int", "optional": false, "format": 257 } }, { "name": "raw", "type": { "kind": "simple", "type": "slice", "optional": false } }] },
    { "name": "SendParameters", "header": null, "fields": [{ "name": "bounce", "type": { "kind": "simple", "type": "bool", "optional": false } }, { "name": "to", "type": { "kind": "simple", "type": "address", "optional": false } }, { "name": "value", "type": { "kind": "simple", "type": "int", "optional": false, "format": 257 } }, { "name": "mode", "type": { "kind": "simple", "type": "int", "optional": false, "format": 257 } }, { "name": "body", "type": { "kind": "simple", "type": "cell", "optional": true } }, { "name": "code", "type": { "kind": "simple", "type": "cell", "optional": true } }, { "name": "data", "type": { "kind": "simple", "type": "cell", "optional": true } }] },
    { "name": "Deploy", "header": 2490013878, "fields": [{ "name": "queryId", "type": { "kind": "simple", "type": "uint", "optional": false, "format": 64 } }] },
    { "name": "DeployOk", "header": 2952335191, "fields": [{ "name": "queryId", "type": { "kind": "simple", "type": "uint", "optional": false, "format": 64 } }] },
    { "name": "FactoryDeploy", "header": 1829761339, "fields": [{ "name": "queryId", "type": { "kind": "simple", "type": "uint", "optional": false, "format": 64 } }, { "name": "cashback", "type": { "kind": "simple", "type": "address", "optional": false } }] },
    { "name": "NftTransfer", "header": 1607220500, "fields": [{ "name": "query_id", "type": { "kind": "simple", "type": "uint", "optional": false, "format": 64 } }, { "name": "new_owner", "type": { "kind": "simple", "type": "address", "optional": false } }, { "name": "response_destination", "type": { "kind": "simple", "type": "address", "optional": false } }, { "name": "custom_payload", "type": { "kind": "simple", "type": "cell", "optional": true } }, { "name": "forward_amount", "type": { "kind": "simple", "type": "uint", "optional": false, "format": "coins" } }, { "name": "forward_payload", "type": { "kind": "simple", "type": "slice", "optional": false, "format": "remainder" } }] },
    { "name": "NftOwnershipAssigned", "header": 85167505, "fields": [{ "name": "query_id", "type": { "kind": "simple", "type": "uint", "optional": false, "format": 64 } }, { "name": "prev_owner", "type": { "kind": "simple", "type": "address", "optional": false } }, { "name": "forward_payload", "type": { "kind": "simple", "type": "slice", "optional": false, "format": "remainder" } }] },
    { "name": "NftExcesses", "header": 1871312355, "fields": [{ "name": "query_id", "type": { "kind": "simple", "type": "uint", "optional": false, "format": 64 } }] },
    { "name": "NftGetStaticData", "header": 801842850, "fields": [{ "name": "query_id", "type": { "kind": "simple", "type": "uint", "optional": false, "format": 64 } }] },
    { "name": "NftReportStaticData", "header": 2339837749, "fields": [{ "name": "query_id", "type": { "kind": "simple", "type": "uint", "optional": false, "format": 64 } }, { "name": "index", "type": { "kind": "simple", "type": "uint", "optional": false, "format": 256 } }, { "name": "collection", "type": { "kind": "simple", "type": "address", "optional": false } }] },
    { "name": "NftGetRoyaltyParams", "header": 1765620048, "fields": [{ "name": "query_id", "type": { "kind": "simple", "type": "uint", "optional": false, "format": 64 } }] },
    { "name": "NftReportRoyaltyParams", "header": 2831876269, "fields": [{ "name": "query_id", "type": { "kind": "simple", "type": "uint", "optional": false, "format": 64 } }, { "name": "numerator", "type": { "kind": "simple", "type": "uint", "optional": false, "format": 16 } }, { "name": "denominator", "type": { "kind": "simple", "type": "uint", "optional": false, "format": 16 } }, { "name": "destination", "type": { "kind": "simple", "type": "address", "optional": false } }] },
    { "name": "NftDestroy", "header": 520377210, "fields": [{ "name": "query_id", "type": { "kind": "simple", "type": "uint", "optional": false, "format": 64 } }] },
    { "name": "NftDeploy", "header": 3332240189, "fields": [{ "name": "index", "type": { "kind": "simple", "type": "uint", "optional": false, "format": 256 } }, { "name": "owner", "type": { "kind": "simple", "type": "address", "optional": false } }, { "name": "content", "type": { "kind": "simple", "type": "cell", "optional": false } }, { "name": "royalty_destination", "type": { "kind": "simple", "type": "address", "optional": false } }, { "name": "numerator", "type": { "kind": "simple", "type": "uint", "optional": false, "format": 16 } }, { "name": "denominator", "type": { "kind": "simple", "type": "uint", "optional": false, "format": 16 } }] },
    { "name": "RequestNftDeploy", "header": 1410495530, "fields": [{ "name": "index", "type": { "kind": "simple", "type": "uint", "optional": false, "format": 256 } }, { "name": "amount", "type": { "kind": "simple", "type": "uint", "optional": false, "format": "coins" } }, { "name": "owner", "type": { "kind": "simple", "type": "address", "optional": false } }, { "name": "content", "type": { "kind": "simple", "type": "cell", "optional": false } }] },
    { "name": "NftData", "header": null, "fields": [{ "name": "deployed", "type": { "kind": "simple", "type": "bool", "optional": false } }, { "name": "index", "type": { "kind": "simple", "type": "int", "optional": false, "format": 257 } }, { "name": "collection", "type": { "kind": "simple", "type": "address", "optional": false } }, { "name": "owner", "type": { "kind": "simple", "type": "address", "optional": false } }, { "name": "content", "type": { "kind": "simple", "type": "cell", "optional": false } }] },
    { "name": "NftRoyaltyParams", "header": null, "fields": [{ "name": "numerator", "type": { "kind": "simple", "type": "int", "optional": false, "format": 257 } }, { "name": "denominator", "type": { "kind": "simple", "type": "int", "optional": false, "format": 257 } }, { "name": "royalty_destination", "type": { "kind": "simple", "type": "address", "optional": false } }] },
];
var NftItem_getters = [
    { "name": "get_nft_data", "arguments": [], "returnType": { "kind": "simple", "type": "NftData", "optional": false } },
    { "name": "royalty_params", "arguments": [], "returnType": { "kind": "simple", "type": "NftRoyaltyParams", "optional": false } },
];
var NftItem_receivers = [
    { "receiver": "internal", "message": { "kind": "typed", "type": "NftDeploy" } },
    { "receiver": "internal", "message": { "kind": "typed", "type": "NftDestroy" } },
    { "receiver": "internal", "message": { "kind": "typed", "type": "NftTransfer" } },
    { "receiver": "internal", "message": { "kind": "typed", "type": "NftGetStaticData" } },
    { "receiver": "internal", "message": { "kind": "typed", "type": "NftGetRoyaltyParams" } },
];
var NftItem = /** @class */ (function () {
    function NftItem(address, init) {
        this.abi = {
            types: NftItem_types,
            getters: NftItem_getters,
            receivers: NftItem_receivers,
            errors: NftItem_errors,
        };
        this.address = address;
        this.init = init;
    }
    NftItem.init = function (collection, index) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, NftItem_init(collection, index)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    NftItem.fromInit = function (collection, index) {
        return __awaiter(this, void 0, void 0, function () {
            var init, address;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, NftItem_init(collection, index)];
                    case 1:
                        init = _a.sent();
                        address = (0, core_1.contractAddress)(0, init);
                        return [2 /*return*/, new NftItem(address, init)];
                }
            });
        });
    };
    NftItem.fromAddress = function (address) {
        return new NftItem(address);
    };
    NftItem.prototype.send = function (provider, via, args, message) {
        return __awaiter(this, void 0, void 0, function () {
            var body;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        body = null;
                        if (message && typeof message === 'object' && !(message instanceof core_1.Slice) && message.$$type === 'NftDeploy') {
                            body = (0, core_1.beginCell)().store(storeNftDeploy(message)).endCell();
                        }
                        if (message && typeof message === 'object' && !(message instanceof core_1.Slice) && message.$$type === 'NftDestroy') {
                            body = (0, core_1.beginCell)().store(storeNftDestroy(message)).endCell();
                        }
                        if (message && typeof message === 'object' && !(message instanceof core_1.Slice) && message.$$type === 'NftTransfer') {
                            body = (0, core_1.beginCell)().store(storeNftTransfer(message)).endCell();
                        }
                        if (message && typeof message === 'object' && !(message instanceof core_1.Slice) && message.$$type === 'NftGetStaticData') {
                            body = (0, core_1.beginCell)().store(storeNftGetStaticData(message)).endCell();
                        }
                        if (message && typeof message === 'object' && !(message instanceof core_1.Slice) && message.$$type === 'NftGetRoyaltyParams') {
                            body = (0, core_1.beginCell)().store(storeNftGetRoyaltyParams(message)).endCell();
                        }
                        if (body === null) {
                            throw new Error('Invalid message type');
                        }
                        return [4 /*yield*/, provider.internal(via, __assign(__assign({}, args), { body: body }))];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    NftItem.prototype.getGetNftData = function (provider) {
        return __awaiter(this, void 0, void 0, function () {
            var builder, source, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        builder = new core_1.TupleBuilder();
                        return [4 /*yield*/, provider.get('get_nft_data', builder.build())];
                    case 1:
                        source = (_a.sent()).stack;
                        result = loadTupleNftData(source);
                        return [2 /*return*/, result];
                }
            });
        });
    };
    NftItem.prototype.getRoyaltyParams = function (provider) {
        return __awaiter(this, void 0, void 0, function () {
            var builder, source, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        builder = new core_1.TupleBuilder();
                        return [4 /*yield*/, provider.get('royalty_params', builder.build())];
                    case 1:
                        source = (_a.sent()).stack;
                        result = loadTupleNftRoyaltyParams(source);
                        return [2 /*return*/, result];
                }
            });
        });
    };
    return NftItem;
}());
exports.NftItem = NftItem;
